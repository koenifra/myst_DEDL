{"version":2,"kind":"Notebook","sha256":"0205b551c3b2f7bc8ac9d70fd03a6ceceec72e3dbf15a078961aff62fb73a21f","slug":"dedl-hook-access-1","location":"/HOOK/DEDL-Hook_access.ipynb","dependencies":[],"frontmatter":{"title":"Access to Hook services ","tags":["Authentification","Token"],"authors":[{"id":"Author: EUMETSAT","name":"Author: EUMETSAT"}],"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"numbering":{"title":{"offset":2}},"exports":[{"format":"ipynb","filename":"DEDL-Hook_access.ipynb","url":"/DEDL-Hook_access-e37093177cabd9104265aa5d693b3c29.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This Notebook demonstrates:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tehR9GwDp4"}],"key":"tLRwymEy56"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Retrieval of a token appropriate for interaction with the OnDemand Processing API (Hook API)","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"paWkxLhGWu"}],"key":"mOFSTwf1wh"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Listing of available Hooks (Processors) using the retrieved token","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fmEQuyNVwF"}],"key":"e7tH9ACHlQ"}],"key":"i9ELZamWgk"}],"key":"tT5gKIsCXC"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"%pip install pycurl\n\nimport json\nfrom io import BytesIO\nfrom urllib.parse import urlencode\nimport getpass\nimport pycurl\nimport requests\nfrom getpass import getpass\nfrom IPython.display import JSON","visibility":"show","key":"nFv6mDBOJM"},{"type":"output","id":"uTxhqYlq_VuiF2jWPbmFI","data":[],"visibility":"show","key":"gRQJyBOXmv"}],"visibility":"show","key":"P1NIFQsJLG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Autehentication - function","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RNROjO3mP4"}],"identifier":"autehentication-function","label":"Autehentication - function","html_id":"autehentication-function","implicit":true,"key":"XMJWE3URDu"}],"key":"EQ6OFX8v8M"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import requests\nfrom lxml import html\nfrom urllib.parse import parse_qs, urlparse\n\nIAM_URL = \"https://auth.destine.eu/\"\nCLIENT_ID = \"dedl-hook\"\nREALM = \"desp\"\nSERVICE_URL = \"https://odp.data.destination-earth.eu/odata/v1/\"\n\n\nclass DESPAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_token(self):\n        with requests.Session() as s:\n\n            # Get the auth url\n            auth_url = (\n                html.fromstring(\n                    s.get(\n                        url=IAM_URL\n                        + \"/realms/\"\n                        + REALM\n                        + \"/protocol/openid-connect/auth\",\n                        params={\n                            \"client_id\": CLIENT_ID,\n                            \"redirect_uri\": SERVICE_URL,\n                            \"scope\": \"openid\",\n                            \"response_type\": \"code\",\n                        },\n                    ).content.decode()\n                )\n                .forms[0]\n                .action\n            )\n\n            # Login and get auth code\n            login = s.post(\n                auth_url,\n                data={\n                    \"username\": self.username,\n                    \"password\": self.password,\n                },\n                allow_redirects=False,\n            )\n\n            # We expect a 302, a 200 means we got sent back to the login page and there's probably an error message\n            if login.status_code == 200:\n                tree = html.fromstring(login.content)\n                error_message_element = tree.xpath('//span[@id=\"input-error\"]/text()')\n                error_message = (\n                    error_message_element[0].strip()\n                    if error_message_element\n                    else \"Error message not found\"\n                )\n                raise Exception(error_message)\n\n            if login.status_code != 302:\n                raise Exception(\"Login failed\")\n\n            auth_code = parse_qs(urlparse(login.headers[\"Location\"]).query)[\"code\"][0]\n\n            # Use the auth code to get the token\n            response = requests.post(\n                IAM_URL + \"/realms/\" + REALM + \"/protocol/openid-connect/token\",\n                data={\n                    \"client_id\": CLIENT_ID,\n                    \"redirect_uri\": SERVICE_URL,\n                    \"code\": auth_code,\n                    \"grant_type\": \"authorization_code\",\n                    \"scope\": \"\",\n                },\n            )\n\n            if response.status_code != 200:\n                raise Exception(\"Failed to get token\")\n\n            token = response.json()[\"access_token\"]\n\n            return token\n\n\nclass DEDLAuth:\n    def __init__(self, desp_access_token):\n        self.desp_access_token = desp_access_token\n\n    def get_token(self):\n        DEDL_TOKEN_URL = \"https://identity.data.destination-earth.eu/auth/realms/dedl/protocol/openid-connect/token\"\n        DEDL_CLIENT_ID = \"hda-public\"\n        AUDIENCE = \"hda-public\"\n\n        data = {\n            \"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\",\n            \"subject_token\": self.desp_access_token,\n            \"subject_issuer\": \"desp-oidc\",\n            \"subject_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n            \"client_id\": DEDL_CLIENT_ID,\n            \"audience\": AUDIENCE,\n        }\n\n        response = requests.post(DEDL_TOKEN_URL, data=data)\n\n        print(\"Response code:\", response.status_code)\n\n        if response.status_code == 200:\n            dedl_token = response.json()[\"access_token\"]\n            return dedl_token\n        else:\n            print(response.json())\n            print(\"Error obtaining DEDL access token\")\n\n\nclass AuthHandler:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        self.desp_access_token = None\n        self.dedl_access_token = None\n\n    def get_token(self):\n        # Get DESP auth token\n        desp_auth = DESPAuth(self.username, self.password)\n        self.desp_access_token = desp_auth.get_token()\n\n        # Get DEDL auth token\n        dedl_auth = DEDLAuth(self.desp_access_token)\n        self.dedl_access_token = dedl_auth.get_token()\n\n        return self.dedl_access_token","visibility":"show","key":"vUKmxETTSj"},{"type":"output","id":"1wBL5Fki8D-YdRb7Xstae","data":[],"visibility":"show","key":"uT3NJkva61"}],"visibility":"show","key":"q5hAfZNvOT"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Authetication","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OaeERk6K5N"}],"identifier":"authetication","label":"Authetication","html_id":"authetication","implicit":true,"key":"n1A0yXTFKv"}],"key":"NVterh6iB9"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Enter DESP credentials.\nDESP_USERNAME = input(\"Please input your DESP username or email: \")\nDESP_PASSWORD = getpass(\"Please input your DESP password: \")\n\ntoken = AuthHandler(DESP_USERNAME, DESP_PASSWORD)\naccess_token = token.get_token()\n\n# Check the status of the request\nif access_token is not None:\n\n    print(\"DEDL/DESP Access Token Obtained Successfully\")\n\nelse:\n\n    print(\"Failed to Obtain DEDL/DESP Access Token\")","visibility":"show","key":"dGgOpCW54j"},{"type":"output","id":"LAXz_JKdik8CQ7Je5mHzS","data":[],"visibility":"show","key":"i2BfVFfOBO"}],"visibility":"show","key":"iNg5fDQDla"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get a list of avilable Hooks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"E0gqJKqKQf"}],"identifier":"get-a-list-of-avilable-hooks","label":"Get a list of avilable Hooks","html_id":"get-a-list-of-avilable-hooks","implicit":true,"key":"DSKUWRHw6H"}],"key":"fnHc9f6M6Y"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true}},"children":[{"type":"code","lang":"python","executable":true,"value":"api_headers = {\"Authorization\": \"Bearer \" + access_token}\nservice_root_url = \"https://odp.data.destination-earth.eu/odata/v1/\"\nresult = requests.get(service_root_url + \"Workflows\", headers=api_headers).json()\n\n# Assuming 'result' is a JSON array\nfor item in result[\"value\"]:\n    for key, value in item.items():\n        print(f\"{key}: {value}\")\n    print()  # Print an empty line to separate each item","key":"YUWg68RkoW"},{"type":"output","id":"fBGCjx3rSPhZA1cFHINCE","data":[],"key":"bgeZYRn56A"}],"key":"U1dP6q4b95"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Licence","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nhgO7wYG4I"}],"key":"tPBgD5opsS"},{"type":"text","value":": MIT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gxLbsVJBoZ"}],"key":"uXWHbZW7Bw"}],"key":"D6t9UoVoBi"}],"key":"wpHvjDBoWO"},"references":{"cite":{"order":[],"data":{}}}}